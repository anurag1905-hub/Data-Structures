#include<bits/stdc++.h>
using namespace std;
void updateValueUtil(vector<int>&st,int start,int end,int target,int diff,int index){
    if(target<start||target>end){
        return;
    }
    st[index]+=diff;
    if(start!=end){
        int mid=start+(end-start)/2;
        updateValueUtil(st,start,mid,target,diff,2*index+1);
        updateValueUtil(st,mid+1,end,target,diff,2*index+2);
    }
    
}
void updateValue(vector<int>&arr,vector<int>&st,int n,int i,int new_val){
    if(i<0||i>=n){
        return;
    }
    int diff = new_val-arr[i];
    arr[i]=new_val;
    updateValueUtil(st,0,n-1,i,diff,0);
}
int getSumUtil(vector<int>&st,int start,int end,int querystart,int queryend,int index){
    if(querystart<=start&&queryend>=end){
        return st[index];
    }
    if(querystart>end||queryend<start){
        return 0;
    }
    int mid = start+(end-start)/2;
    return getSumUtil(st,start,mid,querystart,queryend,2*index+1)+
           getSumUtil(st,mid+1,end,querystart,queryend,2*index+2);
}
int getSum(vector<int>&st,int n,int querystart,int queryend){
    if(querystart<0||querystart>=n||querystart>queryend){
        return -1;
    }
    return getSumUtil(st,0,n-1,querystart,queryend,0);
}
int constructSTUtil(vector<int>&arr,int start,int end,vector<int>&st,int index){
    if(start==end){
        st[index]=arr[start];
        return arr[start];
    }
    int mid = start+(end-start)/2;
    st[index]=constructSTUtil(arr,start,mid,st,2*index+1)+constructSTUtil(arr,mid+1,end,st,2*index+2);
    return st[index];
}
vector<int> constructST(vector<int>&arr,int n){
    int x = (int)(ceil(log2(n)));
    int max_size = 2*(int)pow(2,x)-1;
    vector<int>st(max_size);
    constructSTUtil(arr,0,n-1,st,0);
    return st;
}
int main(){
    vector<int>arr = {1,3,5,7,9,11};
    int n = sizeof(arr)/sizeof(arr[0]);
    vector<int>st = constructST(arr,n);
    cout<<getSum(st,n,1,3)<<endl;
    updateValue(arr,st,n,1,10);
    cout<<getSum(st,n,1,3);
}
